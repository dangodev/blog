[{"data":{"title":"screen width media queries are obsolete","date":"2019-09-30","description":"Media queries are absolute, and other thoughts after using them for a decade.","slug":"screen-width-media-queries-are-obsolete","image":"//www.placecage.com/800/450","tag":"dev","updated":"2019-09-31"},"messages":[{"message":"Incorrect list-item indent: add 1 space","name":"61:4","reason":"Incorrect list-item indent: add 1 space","line":61,"column":4,"location":{"start":{"line":61,"column":4,"offset":1745},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 1 space","name":"62:4","reason":"Incorrect list-item indent: add 1 space","line":62,"column":4,"location":{"start":{"line":62,"column":4,"offset":1803},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 1 space","name":"63:4","reason":"Incorrect list-item indent: add 1 space","line":63,"column":4,"location":{"start":{"line":63,"column":4,"offset":1863},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Found reference to undefined definition","name":"21:73-21:96","reason":"Found reference to undefined definition","line":21,"column":73,"location":{"start":{"line":21,"column":73,"offset":558},"end":{"line":21,"column":96,"offset":581},"indent":[]},"source":"remark-lint","ruleId":"no-undefined-references","fatal":false}],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p>Ah, the noble <code>@media</code> query. Useful for all sorts of things nowadays, like\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/@media/prefers-color-scheme\">prefers-color-scheme</a>:</p>\n<pre><code class=\"language-css\">@media (prefers-color-scheme: dark) {\n  background: black;\n  color: white;\n}\n</code></pre>\n<p>But consider the <code>min-width</code> queryâ€”the one we all cut our teeth on when [responsive design][rd]\nfirst came into view. This is how weâ€™d pull off those fancy responsive columns, for instance:</p>\n<pre><code class=\"language-css\">/* Mobile firstâ„¢! */\nfloat: none;\n\n/* small tablet sizes */\n@media (min-width: 600px) {\n  float: left;\n  width: 50%;\n}\n\n/* medium tablet / small laptop sizes */\n@media (min-width: 900px) {\n  width: 33.33333333%;\n}\n\n/* desktop size */\n@media (min-width: 1200px) {\n  width: 25%;\n}\n\n/* large screen size */\n@media (min-width: 1800px) {\n  width: 20%;\n}\n</code></pre>\n<p>Suddenly a new world opened up! We were able to use CSS to rearrange content based on device size!\nNo more awkward scrollbars! No more tiny, tiny, tiny text on phones! With our newfound power, the\nweb became a much better place.</p>\n<p>This new, multi-device world gave rise to complexity in our designs. Suddenly, we had not one screen\nto design for, but dozens! The web ascended beyond its print origins. And it was amazing. But we had\nto deal with this complexity somehow. We did via <strong>componentization</strong>.</p>\n<p>Component thinking for the web started with CSS paradigms like Nicole Sullivanâ€™s <a href=\"http://oocss.org/\">OOCSS</a> and\n<a href=\"http://getbem.com/\">BEM</a> in the early 2010s, to name a few. In a nutshell, component thinking involves building:</p>\n<ol>\n<li>Modular, reusable bits of UI (think <code>.nav</code> and <code>.btn</code>)</li>\n<li>Components that keep track of their own state and styles</li>\n<li>Components that maintain reusability by displaying the same, regardless of context</li>\n</ol>\n<p>Letâ€™s take a look back at screen width media queries againâ€”see how that breaks component thinking?\nIf I have, say, a blog post component (like the one youâ€™re looking at now!) that is responsible for\nword wrap, but I also have it next to a sidebar that can open and close, how should that be managed?</p>\n<video controls loop muted autoplay title=\"recording of a sidebar expanding and contracting, destroying text flow beside it\">\n  <source src=\"/assets/screen-width-media-queries-are-a-hack/expanding-sidebar.mp4\" type=\"video/mp4\">\n</video>\n<p>We should be stacking those images a little better, and now screen width media queries canâ€™t help us\nhere. <strong>The screen width isnâ€™t changing!</strong> Instead, weâ€™d have to now create some parent component\nthat controls the layout. But in order to do that, we have to <strong>strip responsibility of layout away\nfrom our blog post component</strong>â€”the very thing it was created to do!</p>\n<p><a href=\"https://alistapart.com/article/container-queries-once-more-unto-the-breach/\">Container queries</a> have been requested since 2015 to solve this problem, so this\nisnâ€™t new. But itâ€™s now 2019, and, well, itâ€™s time we found another way to solve this. What should\nwe do?</p>\n<p>Currently, <strong>CSS Grid</strong> is the closest, most versatile thing we have to a media query that respects\nthe actual width of a component. Consider this beautiful CSS snippet from <a href=\"https://labs.jensimmons.com/2017/03-009.html\">Jen Simmons</a>:</p>\n<pre><code class=\"language-css\">.grid {\n  display: grid;\n  grid-gap: 1rem;\n  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));\n}\n</code></pre>\n<p>Here we have a pretty sophsticated bit of logic in only 3 lines of CSS. Letâ€™s focus on the last\nproperty, <code>grid-template-columns</code>. With that, weâ€™re able to:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Code</th>\n<th align=\"left\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>repeat</code></td>\n<td align=\"left\">Automatically figure out columns based on this logic</td>\n</tr>\n<tr>\n<td align=\"left\"><code>auto-fit</code></td>\n<td align=\"left\">If the items donâ€™t fill up the first row, stretch them out till they do</td>\n</tr>\n<tr>\n<td align=\"left\"><code>minmax(300px, 1fr)</code></td>\n<td align=\"left\"><code>1fr</code> sizes every component proportionally to each other. <code>300px</code> tells grid that once they get smaller than that to push them to the next row ðŸŽ‰</td>\n</tr>\n</tbody>\n</table>\n<h2>Diving deeper</h2>\n<p>I canâ€™t recommend this video by <a href=\"https://www.chenhuijing.com/#%F0%9F%9A%B2\">Chen Hui Jing</a> enough for understanding the difficult\nparts of Grid like <code>auto-fit</code> vs <code>auto-fill</code>. Definitely worth a watch!</p>\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube-nocookie.com/embed/ZRtzk0371tk\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"},{"data":{"title":"Test Post","date":"2019-08-30","description":"This is an example test post","slug":"test-post","image":"/assets/thumb/test-post.jpg","tag":"philosophy"},"messages":[],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p>Yo this is a test.</p>\n<p>Is it working?</p>\n<pre><code class=\"language-html\">&#x3C;check-this-out>&#x3C;/check-this-out>\n</code></pre>\n"}]