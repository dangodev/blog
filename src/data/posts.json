[{"data":{"title":"the 3 pillars of front-end knowledge","date":"2020-02-17","description":"The world of front-end is vast, so where does one start? And where does mastery end?","slug":"3-pillars-of-front-end-knowledge","tag":"dev","updated":"2020-02-17"},"messages":[{"message":"Found unused definition","name":"241:1-241:58","reason":"Found unused definition","line":241,"column":1,"location":{"start":{"line":241,"column":1,"offset":20168},"end":{"line":241,"column":58,"offset":20225},"indent":[]},"source":"remark-lint","ruleId":"no-unused-definitions","fatal":false},{"message":"Found unused definition","name":"250:1-250:88","reason":"Found unused definition","line":250,"column":1,"location":{"start":{"line":250,"column":1,"offset":20717},"end":{"line":250,"column":88,"offset":20804},"indent":[]},"source":"remark-lint","ruleId":"no-unused-definitions","fatal":false},{"message":"Found unused definition","name":"253:1-253:66","reason":"Found unused definition","line":253,"column":1,"location":{"start":{"line":253,"column":1,"offset":20947},"end":{"line":253,"column":66,"offset":21012},"indent":[]},"source":"remark-lint","ruleId":"no-unused-definitions","fatal":false}],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p>It‚Äôs been a little over a year since Chris Coyier‚Äôs post <a href=\"https://css-tricks.com/the-great-divide/\"><em>The Great Divide</em></a> came out, the\nfirst blog post I remember reading that drew a line in the sand between two distinct camps (armies?)\nof front-end developers. Which I guess are, like, at war with each other, or something:</p>\n<blockquote>\n<p>On one side, an army of developers whose interests, responsibilities, and skill sets are heavily\nrevolved around JavaScript. On the other, an army of developers whose interests, responsibilities,\nand skill sets are focused on other areas of the front end, like HTML, CSS, design, interaction,\npatterns, accessibility, etc.</p>\n</blockquote>\n<p>In that year following the post, more of us have begin to see these spheres of expertise pulling\napart, whether this post opened our eyes, or we witnessed the same patterns Chris did.</p>\n<p><strong>But what if the divide was actually made up?</strong> What if, instead of a divide, we just collectively\nadmitted that front-end development is bigger, and more complicated than we originally thought? If\nwe recognized that doing JavaScript <em>well</em> was harder than anticipated, and that it took smart\ncookies with Computer Science (CS) degrees a couple decades to push the ecosystem closer to where it\nneeded to be?</p>\n<p>This post is an appeal to view it all as one, core knowledge, and one core role (albeit big as\nhell). Maybe it‚Äôs harder to attain true mastery than we originally thought. But isn‚Äôt that what\nmakes it deep, and exciting, and satisfying to try?</p>\n<p>I started thinking about this subject again recently when a backend developer reached out to me,\nwanting to learn about modern front-end dev (they hadn‚Äôt really kept up for the past, oh, 6 years or\nso). In listing out all the things they could learn, I noticed <strong>three</strong> (not two) major groupings\nstarted forming. In my mind this not only lays a groundwork for possible starting points, but\ndistinct axes of mastery to pursue the more you commit to front-end.</p>\n<p>So here are the three pillars to front-end development, not in any particular order, that your\njourney should cross into at some point:</p>\n<h2 id=\"-pillar-1-browser-apis--rendering-htmlcss\"><a href=\"#-pillar-1-browser-apis--rendering-htmlcss\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>üë®‚Äçüé® Pillar 1: Browser APIs &#x26; Rendering (HTML/CSS)</h2>\n<p>The pillar of Browser APIs &#x26; Rendering revolves around two central questions: <strong>On the web, how do I\nmake things look like things?</strong> and <strong>How does a browser work to help me accomplish this?</strong></p>\n<p>At beginner levels, browser rendering involves understanding the fundamentals of HTML &#x26; CSS to get\ncode to look like a design. At intermediate levels, this gets into animations, render profiling, and\nmaking interactive things perform adequately in a browser environment. At the highest levels,\nmastery of browser rendering means being able to describe in great detail how assets are requested\nand the priority of their loading, the browser paint API, and how to render anything‚Äîeven 3D‚Äîat 60\nframes per second (the <a href=\"https://dassur.ma/things/120fps/\">maximum a browser will allow</a>).</p>\n<p>For the traditional CS student, the browser is something that often gets underestimated. This\nresults in the common ‚ÄúI don‚Äôt understand CSS‚Äù state of confusion that so many backend developers\nfind themselves in. And it <em>is</em> confusing, until you treat the browser as the special, weird runtime\nenvironment that it is. Often times it‚Äôs what you‚Äôre fighting with here‚Äîyour own misconceptions of\nwhat the browser is doing.</p>\n<p>Take the following with a grain of salt, but here is roughly how you might track growth of your\nknowledge in this area:</p>\n<h3 id=\"beginner\"><a href=\"#beginner\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Beginner</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Fundamentals of HTML</td>\n<td align=\"left\"><em>I understand what different HTML tags do</em></td>\n</tr>\n<tr>\n<td align=\"left\">Fundamentals of CSS</td>\n<td align=\"left\"><em>I understand how to use &#x26; apply CSS to HTML to style pages</em></td>\n</tr>\n<tr>\n<td align=\"left\">Fundamentals of Browser Resources</td>\n<td align=\"left\"><em>I understand where to put CSS &#x26; JS files and reference them in the HTML for them to show up</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"intermediate\"><a href=\"#intermediate\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intermediate</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Accessibility</td>\n<td align=\"left\"><em>I can ensure sites are usable for people that use screen readers and other assistive technologies</em></td>\n</tr>\n<tr>\n<td align=\"left\">Animations</td>\n<td align=\"left\"><em>I can animate objects using either <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Animations/Using_CSS_animations\">CSS</a> or a JavaScript framework like <a href=\"https://github.com/mrdoob/three.js/\">Three.js</a></em></td>\n</tr>\n<tr>\n<td align=\"left\">Hardware acceleration</td>\n<td align=\"left\"><em>I understand certain properties &#x26; animations can <a href=\"https://www.smashingmagazine.com/2016/12/gpu-animation-doing-it-right/\">use the GPU</a> for performance</em></td>\n</tr>\n<tr>\n<td align=\"left\">Render profiling¬≤</td>\n<td align=\"left\"><em>I can use tools like <a href=\"lighthouse\">Lighthouse</a> to understand what is slowing down browser rendering &#x26; performance</em></td>\n</tr>\n<tr>\n<td align=\"left\">Image formats</td>\n<td align=\"left\"><em>I understand when to use each image format (<code>JPG</code>, <code>PNG</code>, <code>WebP</code>, ‚Ä¶), and how to <a href=\"http://imageoptim.com/\">optimize them</a></em></td>\n</tr>\n<tr>\n<td align=\"left\">Common Browser API knowledge</td>\n<td align=\"left\"><em>I understand common <a href=\"https://developer.mozilla.org/en-US/docs/Web/API\">browser APIs</a> like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API\"><code>fetch</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/History_API\"><code>history</code></a>, and know when to leverage the browser and when to write my own JavaScript</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"master\"><a href=\"#master\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Master</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Resource prioritization¬≤ ¬≥</td>\n<td align=\"left\"><em>I understand <a href=\"https://developers.google.com/web/fundamentals/performance/resource-prioritization\">resource prioritization</a> and the steps from streaming initial HTML payload, to fetching the resources, to rendering them in priority order</em></td>\n</tr>\n<tr>\n<td align=\"left\">Render debugging¬≤</td>\n<td align=\"left\"><em>I understand how the browser performs <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/simplify-paint-complexity-and-reduce-paint-areas\">paint operations</a> and how to optimize them</em></td>\n</tr>\n<tr>\n<td align=\"left\">Comprehensive Browser API Knowledge¬≤</td>\n<td align=\"left\"><em>I understand more invisible APIs like <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/WebGL_API\">WebGL</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/CSS_Painting_API\">Paint</a>, and the <a href=\"https://developer.mozilla.org/en-US/docs/Web/API/Document_Object_Model\">DOM</a> and understand how they differ or can work in sync to render parts of a page</em></td>\n</tr>\n<tr>\n<td align=\"left\">Browser processes</td>\n<td align=\"left\"><em>I understand the <a href=\"https://developers.google.com/web/updates/2018/09/inside-browser-part2\">Browser, Renderer, and GPU processes</a> that lie underneath the higher-level APIs</em></td>\n</tr>\n</tbody>\n</table>\n<p><em>¬≤ related to Pillar 2 / ¬≥ related to Pillar 3</em></p>\n<p>You may find that much of the ‚ÄúCSS Dev‚Äù from the <em>Great Divide</em> post fits in here, with the addition\nof JavaScript like <code>fetch</code> and <code>history</code>, and the omission of CSS frameworks like <a href=\"http://smacss.com/\">SMACSS</a>.\nSo already we‚Äôre breaking up that division! As for CSS framework knowledge, that fits more neatly\nin‚Ä¶</p>\n<h2 id=\"-pillar-2-js-programming--architecture\"><a href=\"#-pillar-2-js-programming--architecture\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>üë©‚Äçüî¨ Pillar 2: JS Programming &#x26; Architecture</h2>\n<p>The pillar of JavaScript &#x26; Architecture is the recent development of front-end into a more formal,\nproper software environment from web dev‚Äôs <em>laissez-faire</em> ‚Äújust throw that code anywhere‚Äù\nbeginnings. This roughly correlates with the JavaScript-oriented type in Chris‚Äô post somewhat, and\nis closer to the comfort sphere of a traditional Computer Science education. Whereas Pillar 1 trends\ntoward static display, Pillar 2 adds dynamism, automation, and interaction. You could even call this\n‚Äúthe backend of front-end.‚Äù</p>\n<p>This pillar is concerned with <strong>How should this application be interacted with?</strong> and <strong>How should\ncode for the front-end be organized for delivery and team maintainability?</strong> The pursuit of these 2\nquestions, together, have led to many milestones such as that React thing you‚Äôve heard so much about\n(along with Node.js, which we‚Äôll cover more in the last pillar).</p>\n<p>Though JavaScript is one of the most popular programming ecosystems, it‚Äôs still developing. And for\nthat reason I don‚Äôt feel comfortable dividing intermediate- and master-level topics. Everyone‚Äôs\njourney through here will differ, and for that reason, I only distinguish between basics and\nnon-basics.</p>\n<p>In your rebuttal of this blog post, please be gentle with this section ;)</p>\n<h3 id=\"beginner-1\"><a href=\"#beginner-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Beginner</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Fundamentals of JavaScript</td>\n<td align=\"left\"><em>I can build basic things with vanilla¬†JS and don‚Äôt always need a library (only sometimes)</em></td>\n</tr>\n<tr>\n<td align=\"left\">JavaScript quirks</td>\n<td align=\"left\"><em>I understand the basics of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Working_with_Objects\">working with objects</a> in JS, the basics of <a href=\"https://github.com/getify/You-Dont-Know-JS/blob/2nd-ed/objects-classes/ch1.md\"><code>this</code></a>, and a rough understanding of scopes</em></td>\n</tr>\n<tr>\n<td align=\"left\">Async knowledge</td>\n<td align=\"left\"><em>I understand the basics of <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Promise\"><code>Promise()</code></a> and can write code to fetch remote data (AJAX) or deal with async operations</em></td>\n</tr>\n<tr>\n<td align=\"left\">Fundamentals of Frameworks¬≥</td>\n<td align=\"left\"><em>I undestand how to spin up a React/Vue/Svelte/whatever project and get something visible</em></td>\n</tr>\n<tr>\n<td align=\"left\">Fundamentals of CSS organization¬π</td>\n<td align=\"left\"><em>I have some basic strategies to organize styles, whether that‚Äôs a methodology like <a href=\"http://smacss.com/\">SMACSS</a> or a utility like <a href=\"https://tailwindcss.com\">Tailwind</a></em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"intermediatemaster\"><a href=\"#intermediatemaster\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intermediate/Master</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Comprehensive JS knowledge¬≥</td>\n<td align=\"left\"><em>I can solve any common problem in JS (when sensible), and I possess up-to-date knowledge of the latest <a href=\"https://developer.mozilla.org/en-US/docs/Archive/Web/JavaScript/ECMAScript_Next_support_in_Mozilla\">ECMAScript 20xx</a> features</em></td>\n</tr>\n<tr>\n<td align=\"left\">Front-end philosophy</td>\n<td align=\"left\"><em>I have cursory-to-advanced knowledge of how strategies like <a href=\"https://xstate.js.org/\">State Machines</a>, <a href=\"https://www.learnrxjs.io/\">Observables</a>, <a href=\"https://reactjs.org/docs/design-principles.html\">Component-based architecture</a>, etc. solve different problems for building web applications</em></td>\n</tr>\n<tr>\n<td align=\"left\">Performance profiling</td>\n<td align=\"left\"><em>I understand how to profile JavaScript‚Äôs performance, even moving operations <a href=\"https://developers.google.com/web/fundamentals/performance/rendering/optimize-javascript-execution\">off the main thread</a> where needed</em></td>\n</tr>\n<tr>\n<td align=\"left\">Inheritance and prototypes</td>\n<td align=\"left\"><em>Beyond data types, I understand JavaScript‚Äôs <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Inheritance_and_the_prototype_chain\">prototypal inheritance</a> design</em></td>\n</tr>\n<tr>\n<td align=\"left\">Type System</td>\n<td align=\"left\"><em>I understand JavaScript‚Äôs type system and <a href=\"https://developer.mozilla.org/en-US/docs/Glossary/Type_coercion\">coercion</a>, and know how best to leverage it (and potentially possess TypeScript knowledge)</em></td>\n</tr>\n<tr>\n<td align=\"left\">Testing</td>\n<td align=\"left\"><em>I ensure all JavaScript is tested, whether with <a href=\"https://jestjs.io/\">unit / E2E</a> tests, <a href=\"https://developers.google.com/web/tools/puppeteer/\">headless browser tests</a>, or <a href=\"https://happo.io/\">VRT</a></em></td>\n</tr>\n<tr>\n<td align=\"left\">Advanced network knowledge¬π</td>\n<td align=\"left\"><em>I have comprehensive strategies for consuming API data and feel comfortable using client like <a href=\"https://www.apollographql.com/\">Apollo</a> or rolling my own.</em></td>\n</tr>\n<tr>\n<td align=\"left\">DOM manipulation¬π</td>\n<td align=\"left\"><em>I understand JavaScript‚Äôs role in DOM manipulation, and strategies for managing this such as <a href=\"https://reactjs.org/docs/design-principles.html\">React</a> (related to Pillar 1)</em></td>\n</tr>\n<tr>\n<td align=\"left\">WebAssembly</td>\n<td align=\"left\"><em>I understand how JavaScript interops with <a href=\"https://webassembly.org/\">WebAssembly</a> and know when to leverage it</em></td>\n</tr>\n</tbody>\n</table>\n<p><em>¬π related to Pillar 1 / ¬≥ related to Pillar 3</em></p>\n<p>In JavaScript‚Äôs strange, strange development, something very weird happened that few could have\npredicted: <em>JavaScript turned into a backend language with Node.js.</em> This not only changed how we\n<em>prepared</em> JavaScript for the browser (Pillar 1); it also changed how we wrote it (Pillar 2).</p>\n<p>Let‚Äôs be clear: <em>Node.js is truly a backend language.</em> We are not talking about the backend‚Äîservers,\nAPIs, and the like. But we are talking about the bits of Node.js that shape the front-end ecosystem\nfrom tooling to npm. Knowledge of how Node.js shapes the front-end is our final pillar.</p>\n<h2 id=\"‚ôÄÔ∏è-pillar-3-the-toolchain-nodejs-npm-babel-bundlers\"><a href=\"#%E2%99%80%EF%B8%8F-pillar-3-the-toolchain-nodejs-npm-babel-bundlers\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>üë∑‚Äç‚ôÄÔ∏è Pillar 3: The Toolchain (Node.js, npm, Babel, bundlers)</h2>\n<p>The final pillar‚ÄîThe Toolchain‚Äîconcerns itself with the ‚Äúmeta‚Äù parts of front-end development. Its\nconcern is: <strong>Can the way we develop web applications be improved?</strong> and it‚Äôs given rise to <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">module\nsystems</a>, <a href=\"https://www.npmjs.com/\">package managers</a>, <a href=\"https://babeljs.io/\">transpilers</a>, <a href=\"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Modules\">bundlers</a>, and even <a href=\"https://reactjs.org/docs/introducing-jsx.html\">new\nlanguages</a>.</p>\n<p>While this pillar is the slipperiest to understand, because by its very nature it questions the\nontology of front-end development, it‚Äôs also the most powerful because it has the ability to\ntransform how we work. For beginners that have started their front-end journey fairly recently, all\nthe kooky toolchains probably comprise the bulk of their learning curve. And for many, they won‚Äôt\ntruly develop a deep understanding of this until they‚Äôve worked in at least several different\nenvironments and contexts. Once they do, intermediates that understand the lay of the land can\ndeftly rig up any development pipeline to fulfill a need. Toolchain masters shape the direction and\nthe future of the common tools we all use.</p>\n<h3 id=\"beginner-2\"><a href=\"#beginner-2\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Beginner</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Boilerplates</td>\n<td align=\"left\"><em>I can operate Boilerplates such as <a href=\"https://cli.vuejs.org/\">Vue CLI</a> to create apps in my preferred ecosystem</em></td>\n</tr>\n<tr>\n<td align=\"left\">Basic npm</td>\n<td align=\"left\"><em>I can add/remove/update npm libraries for use in my front-end app</em></td>\n</tr>\n<tr>\n<td align=\"left\">Basic ecosystem</td>\n<td align=\"left\"><em>I understand how to examine npm package contents and load the correct library build I need</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"intermediate-1\"><a href=\"#intermediate-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Intermediate</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Configuration</td>\n<td align=\"left\"><em>I can configure a local development without a boilerplate, working directly with tools like Gulp, webpack, and Parcel</em></td>\n</tr>\n<tr>\n<td align=\"left\">Transpilation¬π</td>\n<td align=\"left\"><em>I can configure Babel and PostCSS to transpile code for specific targets</em></td>\n</tr>\n<tr>\n<td align=\"left\">Bundling &#x26; optimization¬≤</td>\n<td align=\"left\"><em>I can set up build pipelines to ship production-ready code and optimize delivery of those bundles</em></td>\n</tr>\n<tr>\n<td align=\"left\">Advanced npm</td>\n<td align=\"left\"><em>I‚Äôve deployed my own packages to npm</em></td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"master-1\"><a href=\"#master-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>Master</h3>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Skill</th>\n<th align=\"left\">Example</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\">Architect</td>\n<td align=\"left\"><em>I can build front-end boilerplates for other people to use</em></td>\n</tr>\n<tr>\n<td align=\"left\">AST understanding</td>\n<td align=\"left\"><em>I can create my own <a href=\"https://github.com/jamiebuilds/babel-handbook/blob/master/translations/en/plugin-handbook.md\">Babel</a> or ESLint plugins</em></td>\n</tr>\n<tr>\n<td align=\"left\">Bundler understanding</td>\n<td align=\"left\"><em>I can create my own webpack plugins</em></td>\n</tr>\n<tr>\n<td align=\"left\">Code Generation</td>\n<td align=\"left\"><em>I can generate JS programatically</em></td>\n</tr>\n<tr>\n<td align=\"left\">CI¬≤</td>\n<td align=\"left\"><em>I create automated pipelines for deploying npm packages as well as shipping optimized bundles to production</em></td>\n</tr>\n<tr>\n<td align=\"left\">Ecosystem understanding</td>\n<td align=\"left\"><em>I understand how to deploy npm packages for Node.js, web browsers, and CLI tools, and how to target each</em></td>\n</tr>\n</tbody>\n</table>\n<p><em>¬π related to Pillar 1 / ¬≤ related to Pillar 2</em></p>\n<p>Usually when complaints arise about the state of front-end development, whether that‚Äôs how much it‚Äôs\nchanged, or if it‚Äôs too complicated, usually JavaScript gets the blame when really it‚Äôs the\ntoolchain. Of course, this is confusing, since JavaScript is both the engine that runs the toolchain\n(Node.js) and the input/output of the toolchain itself (browser JS).</p>\n<p>This is also the pillar that‚Äôs undergone the biggest changes of front-end development, and it won‚Äôt\nbe settling any time soon. Still, now‚Äôs the perfect time to jump in and contribute <em>because</em> all\nthese things aren‚Äôt settled yet.</p>\n<h2 id=\"a-final-note-on-mastery\"><a href=\"#a-final-note-on-mastery\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>A final note on mastery</h2>\n<p>Hopefully you noticed the superscript ¬πs, ¬≤s, and ¬≥s linking skills in one pillar to another.\nHopefully, too, you started to get confused about where the barriers lay between the pillars, and\nwhat kept them as distinct. And, hopefully, you realized that all this knowledge feeds into itself,\nand any one pillar is incomplete, and can‚Äôt support a standing structure without the others.</p>\n<p>Mastery itself is a slippery thing. I‚Äôm reminded of Matt Might‚Äôs post, <a href=\"http://matt.might.net/articles/phd-school-in-pictures/\"><em>The illustrated guide to a\nPh.D.</em></a> To merely reach the limits of human knowledge is not enough; we‚Äôre all pushing to try\nand make that little ‚Äúdent‚Äù in the shape of what‚Äôs possible. And with that act, we leave behind a\nbigger world to explore for the next generation.</p>\n<p>While this post was meant to paint a more unified, comprehensive view of front-end development, it‚Äôs\nnot meant to guilt you into figuring all this stuff out on your own. That‚Äôs impossible. You won‚Äôt\nmaster everything, but even theoretically if you could, it would only last for a short time until\nsomeone came along and changed what‚Äôs possible with their dent.</p>\n<p>So above all else, <strong>be kind to yourself,</strong> and pursue mastery only to the extent it‚Äôs rewarding for\nyou and others around you. And while it‚Äôs OK to know different things than everyone else, for the\nlove of God, don‚Äôt create more ‚Äúus vs them‚Äù rhetoric.</p>\n"},{"data":{"title":"media queries are (still) a hack","slug":"media-queries-are-still-a-hack","description":"Revisiting Ian Storm Taylor‚Äôs thoughts 7 years later","tag":"dev","date":"2020-01-18"},"messages":[{"message":"Incorrect list-item indent: add 2 spaces","name":"74:3","reason":"Incorrect list-item indent: add 2 spaces","line":74,"column":3,"location":{"start":{"line":74,"column":3,"offset":3429},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"75:3","reason":"Incorrect list-item indent: add 2 spaces","line":75,"column":3,"location":{"start":{"line":75,"column":3,"offset":3456},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"76:3","reason":"Incorrect list-item indent: add 2 spaces","line":76,"column":3,"location":{"start":{"line":76,"column":3,"offset":3536},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"102:3","reason":"Incorrect list-item indent: add 2 spaces","line":102,"column":3,"location":{"start":{"line":102,"column":3,"offset":4406},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"103:3","reason":"Incorrect list-item indent: add 2 spaces","line":103,"column":3,"location":{"start":{"line":103,"column":3,"offset":4445},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"104:3","reason":"Incorrect list-item indent: add 2 spaces","line":104,"column":3,"location":{"start":{"line":104,"column":3,"offset":4467},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"109:3","reason":"Incorrect list-item indent: add 2 spaces","line":109,"column":3,"location":{"start":{"line":109,"column":3,"offset":4697},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"111:3","reason":"Incorrect list-item indent: add 2 spaces","line":111,"column":3,"location":{"start":{"line":111,"column":3,"offset":4856},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"144:3","reason":"Incorrect list-item indent: add 2 spaces","line":144,"column":3,"location":{"start":{"line":144,"column":3,"offset":6603},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"145:3","reason":"Incorrect list-item indent: add 2 spaces","line":145,"column":3,"location":{"start":{"line":145,"column":3,"offset":6652},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"146:3","reason":"Incorrect list-item indent: add 2 spaces","line":146,"column":3,"location":{"start":{"line":146,"column":3,"offset":6727},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"147:3","reason":"Incorrect list-item indent: add 2 spaces","line":147,"column":3,"location":{"start":{"line":147,"column":3,"offset":6777},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Don‚Äôt use literal URLs without angle brackets","name":"37:37-37:97","reason":"Don‚Äôt use literal URLs without angle brackets","line":37,"column":37,"location":{"start":{"line":37,"column":37,"offset":1710},"end":{"line":37,"column":97,"offset":1770},"indent":[]},"source":"remark-lint","ruleId":"no-literal-urls","fatal":false},{"message":"Use the trailing [] on reference links","name":"82:3-82:22","reason":"Use the trailing [] on reference links","line":82,"column":3,"location":{"start":{"line":82,"column":3,"offset":3800},"end":{"line":82,"column":22,"offset":3819},"indent":[]},"source":"remark-lint","ruleId":"no-shortcut-reference-link","fatal":false},{"message":"Found reference to undefined definition","name":"82:3-82:22","reason":"Found reference to undefined definition","line":82,"column":3,"location":{"start":{"line":82,"column":3,"offset":3800},"end":{"line":82,"column":22,"offset":3819},"indent":[]},"source":"remark-lint","ruleId":"no-undefined-references","fatal":false}],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<h2 id=\"preface\"><a href=\"#preface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>preface</h2>\n<p>It‚Äôs now been over 15 years of me working with CSS, and I‚Äôd had a longstanding itch to write down my\ngrievances about how media queries were insufficient for web and responsive design, even in 2019. It\nwas going to be a thoughtpiece for the ages.</p>\n<p>I was going to start out with some great shared experience and get everyone going ‚Äúyeah, mate! Been\nthere! This guy really gets it.‚Äù Next, I would carefully craft a scenario to show how media queries\nare a hacky solution, rallying sympathizers to my plight by selling it on a practical level. To sell\nit on the intellectual level I was going to throw in some design bullshit about how media queries\nare antithetical to design component thinking. And to tie it all up, I‚Äôd wax poetic about a future\nwhere this problem doesn‚Äôt exist, going beyond the shortcomings of <a href=\"https://github.com/joecritch/container-queries\">container queries</a> and even\nCSS Grid to dream of a solution.</p>\n<p>The title for such a blog post? I needed to really sell it. Something borderline-click-baity, while\nstaying true to my opinions. Something with candor. I titled it: <em>Media Queries are a Hack</em>.</p>\n<p>Then <a href=\"https://twitter.com/zachleat\">@zachleat</a> made this tweet:</p>\n<blockquote>\n<p>I‚Äôm trying to find the earliest mention of Element Queries or Container Queries (or this idea in\npractice, if not name).</p>\n<p>In the lead right now is @joecritch‚Äôs very early work in March 2013\n<a href=\"https://github.com/joecritch/container-queries\">https://github.com/joecritch/container-queries</a>\n(via @innovati).</p>\n<p>Does anyone have evidence of earlier work?</p>\n<p>@zachleat 12:50 PM ¬∑ Dec 10, 2019 <a href=\"https://twitter.com/zachleat/status/1204488622386417665?s=20\">https://twitter.com/zachleat/status/1204488622386417665?s=20</a></p>\n</blockquote>\n<p>And in that tweet thread, it mentioned Ian Storm Taylor‚Äôs blog post titled‚Äîyou guessed it‚Äî<a href=\"https://ianstormtaylor.com/media-queries-are-a-hack/\"><em>Media\nQueries are a Hack</em></a>.</p>\n<p>Written in <strong>2013.</strong></p>\n<p>I am not as original as I think I am. But all things considered, I‚Äôm glad I procrastinated on\nfinishing my blog post because now I can produce something of more value by stealing all these other\nsmart peoples‚Äô ideas.</p>\n<h2 id=\"media-queries-are-still-a-hack\"><a href=\"#media-queries-are-still-a-hack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>media queries are (still) a hack</h2>\n<p>Ian summarizes the major failing of media queries:</p>\n<blockquote>\n<p>I want <strong>write-once, use-anywhere</strong>‚Äîthat‚Äôs what modular code is.</p>\n<p>Media queries are not that. They‚Äôre <strong>write-everywhere</strong>. They‚Äôre relative to your screen, so\nevery time you write a media query for max-width or min-width, you‚Äôre connecting the appearance of\nyour module to the width of the entire canvas‚Äîexactly what you were trying to avoid.</p>\n</blockquote>\n<p>This has only become more true and more of a problem in our React-influenced,\n<em>everything-is-modular</em> landscape of contemporary web design. And this lack of component-oriented\nthinking lead Ian to pine for what we all do‚ÄîContainer Queries.</p>\n<h2 id=\"container-queries\"><a href=\"#container-queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>container queries?</h2>\n<p>If, for example, I have a user card component that I want to rearrange when there‚Äôs not enough room,\nI can only do that based on the browser width, <strong>not the component width itself.</strong></p>\n<figure>\n  <img src=\"/assets/media-queries-are-still-a-hack/user-cards.svg\" alt=\"A horizontally-laid out user card next to a vertical one\" />\n  <figcaption>What if I wanted to stack a card vertically not based on screen width, but based on whether or not the text and image will fit side-by-side? In 2020, I still can‚Äôt.</figcaption>\n</figure>\n<p>Container Queries seem to check off all the boxes:</p>\n<ul>\n<li>‚úÖ Modular and composable</li>\n<li>‚úÖ Attack the root problem of responsive design: resizing based on <strong>content</strong></li>\n<li>‚úÖ CSS-based</li>\n</ul>\n<p>But perfect as they may be, Container Queries are not happening anytime soon. In Zach Leatherman‚Äôs\nrecent article <a href=\"https://www.zachleat.com/web/origin-container-queries/\"><em>The Origin Story of Container Queries</em></a>, after much research, he even admits\nthe grim reality of our beloved Container Queries:</p>\n<blockquote>\n<p>[Container Queries] become almost clich√© to mention it when talking about problems we‚Äôd like the\nweb platform to solve‚Ä¶ Everyone wants it, but it sure seems like no one is actively working on it.</p>\n</blockquote>\n<p>So what‚Äôs a person to do?</p>\n<h2 id=\"css-grid-repeatauto-fit-minmax\"><a href=\"#css-grid-repeatauto-fit-minmax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>css grid repeat(auto-fit, minmax())?</h2>\n<p>If you‚Äôve used CSS Grid, you may be familiar with this wonderful snippet:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.grid</span> {\n  <span class=\"hljs-attribute\">display</span>: grid;\n  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">1rem</span>;\n  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(300px, 1fr));\n}</code></pre>\n<p>I was first introduced to this by <a href=\"https://labs.jensimmons.com/2017/03-009.html\">Jen Simmons</a>‚Äô wonderful demo. With only 3 lines of CSS, we\nhave something that used to take hundreds:</p>\n<ul>\n<li>Responsive without any media queries</li>\n<li>Gutters built-in üòç</li>\n<li>And last, but most importantly, <strong>items that resize based on their width</strong> (kinda sounds like\nContainer Queries, don‚Äôt it?)</li>\n</ul>\n<p>But despite being incredibly-useful, CSS Grid‚Äôs <code>repeat(auto-fit, minmax())</code> has 2 major drawbacks:</p>\n<ul>\n<li>üö´ It can‚Äôt be used on the component level like a Container Query could, so components can‚Äôt\ndeclare their own widths and breakpoints; their parents must.</li>\n<li>üö´ It doesn‚Äôt allow for columns of different widths. Neither can you tell items to responsively\nspan multiple columns without media queries (and if we‚Äôre using media queries we‚Äòre all the way\nback to where we started).</li>\n</ul>\n<h2 id=\"container-queries-1\"><a href=\"#container-queries-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>container queries.</h2>\n<p>It‚Äôs really hard to make a better pitch than Container Queries as a solution to the problem of\nmodular responsive design, after <strong>7 years</strong> and hundreds of great minds have all shared their\ncollective vision of how this holy-grail-of-a-CSS-selector should work. There are no downsides to\nContainer Queries, other than the belabored point that <em>they don‚Äôt exist</em>.</p>\n<p>So in parting, as I alluded to earlier, I will leave you, dear reader, with nary an original\nthought, instead, rehashing my favorite line from Phillip Walton‚Äôs well-referenced <a href=\"https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/\"><em>Responsive\nComponents: A Solution to the Container Queries Problem</em></a>:</p>\n<blockquote>\n<p>While I think we‚Äôd all agree a pure CSS solution is the ultimate goal, I hope we as a community\nare able prevent the perfect from becoming the enemy of the good.</p>\n<p>In matters like this, I like to remind myself of this quote from the <a href=\"https://www.w3.org/TR/html-design-principles/\">W3C‚Äôs HTML design\nprinciples</a>: ‚ÄúIn case of conflict, consider users over authors over implementors over\nspecifiers over theoretical purity.‚Äù</p>\n</blockquote>\n<p>In other words, in 2020, the best solution we have to media queries‚Äô failings is, somewhat\ndisappointingly, JavaScript. But not JavaScript for the sake of JavaScript; JavaScript for the sake\nof users.</p>\n<p>It‚Äôs been 7 years since Ian Storm Taylor published <em>Media Queries are a Hack</em>. To no one‚Äôs surprise,\nin 2020 they‚Äôre still a hack. And we‚Äôre still waiting on Container Queries.</p>\n<p>I may not have any original ideas on this subject, but at least we‚Äôre all on the same page.</p>\n<h2 id=\"more-reading\"><a href=\"#more-reading\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>more reading</h2>\n<ul>\n<li><a href=\"https://ianstormtaylor.com/media-queries-are-a-hack/\">Media Queries are a Hack</a> (the real one)</li>\n<li><a href=\"https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/\">Responsive Components: A Solution to the Container Queries Problem</a></li>\n<li><a href=\"https://css-tricks.com/lets-not-forget-about-container-queries/\">Let‚Äôs Not Forget About Container Queries</a></li>\n<li><a href=\"https://www.zachleat.com/web/origin-container-queries/\">The Origin Story of Container Queries</a></li>\n</ul>\n"},{"data":{"title":"playfulness budget","date":"2019-11-06","description":"Finding that sweet spot of delight and whimsy in application design","slug":"playfulness-budget","tag":"design","updated":"2019-01-18"},"messages":[],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p><em>Homo Ludens</em> is a notable work of literature by Dutch philospher Henry Van Friedrick. In it he\nargues:</p>\n<blockquote>\n<p>Play is essential for the building of culture and intellect.</p>\n</blockquote>\n<p>‚ÄúPlay‚Äî‚Äù¬†that sudden urge you have to jump in that puddle and ruin your shoes. That spark of humor\nwhen you imagine your toaster complaining at you for never cleaning all the crumbs out. When you see\nan empty street and decide to run just because ‚Äúwho says I shouldn‚Äôt be allowed to run in normal\nclothes without a reason?‚Äù The sense of play is something we crave on a regular basis‚Äîsome more than\nothers‚Äîbut can be seen as <em>verboten</em> in application design.</p>\n<p>There‚Äôs some reasonable cause for this feeling‚Äîapplication design does seek to be boring and\npredictable. For this reason I feel it‚Äôs hard for print and advertising designers to cross over into\nUI, and vice-versa. A magazine cover seeks to disrupt the space around it and draw your eye‚Äîeither\nwith boldness in a sea of consistency, or starkness in a sea of boldness; the separation from the\npack is what drives the design. A user interface seeks to be predictable and usable without a\nmanual, allowing a user to accomplish a complicated task with friendly buttons and maybe an input or\ntwo.</p>\n<p>But where do we draw the line? When does ‚Äúpredictable‚Äù and ‚Äúusable‚Äù cross over into sucking the life\nout of an interface?</p>\n<h2 id=\"4-ways-to-spend-playfulness-points\"><a href=\"#4-ways-to-spend-playfulness-points\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4 ways to spend playfulness points</h2>\n<p>I typically envision some imaginary bank or budget of playfulness that I draw from. I only have a\nfew ‚Äúpoints‚Äù to spend to disrupt a user‚Äôs expectations in an application before they get frustrated.\nHow, and when? Here are 5 tips to spending your few points wisely.</p>\n<h3 id=\"1-spend-playfulness-points-during-slow-tasks\"><a href=\"#1-spend-playfulness-points-during-slow-tasks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. spend playfulness points during slow tasks</h3>\n<p>Every user, when using your application, will be in varying states of panic. Typically, the type of\napplication will lean one way or another.</p>\n<p>Booking a hotel, tickets for a show, or flight? These can feel <strong>rushed</strong>, sometimes intentionally,\nand even feature anxiety-inducing timers, <em>BOOK NOW!</em> calls to action, and the impending sense that\nsomeone will snag this before you do (<em>23 people have looked at this Airbnb in the last hour</em>).</p>\n<p>This is <strong>not a good time to test the user‚Äôs patience with playfulness.</strong> But in times when they‚Äôre\nnot rushed or panicked, make their day a little better!</p>\n<figure>\n  <img src=\"/assets/playfulness-budget/pizza-tracker.jpg\" alt=\"Domino‚Äôs Pizza Tracker\" />\n  <figcaption>The Domino‚Äôs Pizza Tracker: probably my favorite example of a playful time-passer</figcaption>\n</figure>\n<p>What better way to kill a 30-minute wait for a pizza to arrive than stare at a pizza tracker? Or say\na user is shopping for beds‚Äîthe opposite of stressful‚Äîand you came up with a cheeky ‚Äúbounce\nsimulator‚Äù that compares mattresses‚Äô bounciness with a fun, interactive animation. These are all\nwonderful opportunities to turn a slow experience where a user has time to spare into a memorable\ninteraction.</p>\n<h3 id=\"2-spend-playfulness-points-during-frustrating-tasks\"><a href=\"#2-spend-playfulness-points-during-frustrating-tasks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. spend playfulness points during frustrating tasks</h3>\n<figure>\n  <video autoplay=\"true\" controls muted loop playsinline width=\"1376\" height=\"600\">\n    <source src=\"/assets/playfulness-budget/little-known-goods-carousel.mp4\" type=\"video/mp4\" />\n  </video>\n  <figcaption>Little Known Goods Carousel animation</figcaption>\n</figure>\n<p>For a recent <a href=\"https://littleknowngoods.com\">ecommerce site I built</a>, I wanted to address 2 pain points that are the bane of\nmy online shopping experience: image carousels and zoom views.</p>\n<p>For some reason, I just find most sites that have these to be buggy, unexpected, and frustrating.\nHoping I wasn‚Äôt alone, I decided to introduce a little unpredictability for a little bit of whimsy.</p>\n<p>Using the metaphor of a map, I created a carousel that folds and unfolds as you click through it,\nanimating smoothly between the stops. For the zoom view, on desktop I made the hover interaction\nreveal the zoomed-in view without clicking. Quick to navigate, quick to dismiss. And on smaller\ndevices when you find yourself pinch‚Äîzooming anyway, I simply made the image itself high-res, and\ndisabled the zoom so users can use the natural zoom on their device (I personally find the simulated\nzoom, like Twitter‚Äôs mobile site, to be buggy, and I always have images flying off into space or\nre-centering wildly, which I don‚Äôt understand because zooming in on static images works just great).</p>\n<p>Perhaps I got a little too anecdotal here, but the main point is: if there‚Äôs an interaction that is\ntypically laden with frustration (date-picking availability, calendars, actually just dates and\ntimes in general are hard‚Ä¶), it may be a good opportunity to turn a bad expectation into an\nunexpected joy by making it playful.</p>\n<h3 id=\"3-spend-playfulness-points-on-first-impressions\"><a href=\"#3-spend-playfulness-points-on-first-impressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. spend playfulness points on first impressions</h3>\n<figure>\n  <video autoplay=\"true\" controls muted loop playsinline width=\"1375\" height=\"600\">\n    <source src=\"/assets/playfulness-budget/playdate.mp4\" type=\"video/mp4\" />\n  </video>\n  <figcaption>A 3D, rotatable portable game console right at the top of the page? Yes, please.</figcaption>\n</figure>\n<p>A user‚Äôs first several seconds on a site is a critical time for them. They‚Äôre orienting to the\nsite‚Äîto the layout, colors, language, etc.‚Äîwhile also having something they want to accomplish.\nWhile often times this is a winding path for the user to clarify what they want while orienting\nthemselves to a new interface, that first few seconds that a user suspends judgment can be just the\nright moment for playfulness.</p>\n<p>Greeting a user, for instance, with a fun animation on page load doesn‚Äôt disrupt their task while\nthey figure out where it is they need to go.</p>\n<p>Granted, there are good and bad types of animation. A good animation would simply be adding motion\nto the hero graphic, where a bad animation would be hiding the top menu and animating in items\none-by-one so the user has to wait painfully to even start their task. But assuming you executed the\nformer, setting an impression for playfulness right off the bat can pay dividends later.</p>\n<h3 id=\"4-spend-playfulness-points-during-successes\"><a href=\"#4-spend-playfulness-points-during-successes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. spend playfulness points during successes</h3>\n<p>Errors are frustrating. Messages like <code>Oops! Something went wrong!</code> can be flippant and tone-deaf,\nespecially when it resulted in data loss. Believe it or not, that was an actual error message I\nencountered that left me unable to pay a bill! <em>Oops!?</em> More like ‚ÄúOops! I accidentally cancelled\nyour horrible service!‚Äù</p>\n<p>In light of so many failures we encounter on the web, successes are something that should be\ncelebrated! üéâ Did a user finish sending an email? Add a fun illustration and some congratulatory\ncopy on that succes page! Has a user reached a certain milestone in your app (miles walked,\nachievement reached, numbers hit)? Add a cool badge to their profile.</p>\n<p>Studies have shown that unexpected rewards result in the most positively-perceived experiences. So\nlet‚Äôs try and help the humans that use our application feel appreciated because they‚Äôre worth it.</p>\n<h2 id=\"how-will-you-spend-yours\"><a href=\"#how-will-you-spend-yours\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>how will you spend yours?</h2>\n<p>An application‚Äôs primary purpose is to help a user accomplish a task, and help them accomplish it as\nquickly and effortlessly as possible. But that can be a little too robotic.</p>\n<p>As we‚Äôre reminded by <em>Homo Ludens</em>, when we‚Äôre dealing with people, sometimes <em>too much</em> efficiency\ncan be boring and detrimental to the squishy humans you‚Äôre guiding. Sometimes the straightest roads\ncan have us feeling sleepy behind the wheel a bit. Sometimes the little detours, the fun little dips\nand curves, <em>make</em> the journey memorable.</p>\n"}]