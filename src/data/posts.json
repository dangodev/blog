[{"data":{"title":"media queries are (still) a hack","slug":"media-queries-are-still-a-hack","description":"Revisiting Ian Storm Taylor’s thoughts 7 years later","tag":"dev","date":"2020-01-18"},"messages":[{"message":"Incorrect list-item indent: add 2 spaces","name":"74:3","reason":"Incorrect list-item indent: add 2 spaces","line":74,"column":3,"location":{"start":{"line":74,"column":3,"offset":3429},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"75:3","reason":"Incorrect list-item indent: add 2 spaces","line":75,"column":3,"location":{"start":{"line":75,"column":3,"offset":3456},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"76:3","reason":"Incorrect list-item indent: add 2 spaces","line":76,"column":3,"location":{"start":{"line":76,"column":3,"offset":3536},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"102:3","reason":"Incorrect list-item indent: add 2 spaces","line":102,"column":3,"location":{"start":{"line":102,"column":3,"offset":4406},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"103:3","reason":"Incorrect list-item indent: add 2 spaces","line":103,"column":3,"location":{"start":{"line":103,"column":3,"offset":4445},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"104:3","reason":"Incorrect list-item indent: add 2 spaces","line":104,"column":3,"location":{"start":{"line":104,"column":3,"offset":4467},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"109:3","reason":"Incorrect list-item indent: add 2 spaces","line":109,"column":3,"location":{"start":{"line":109,"column":3,"offset":4697},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"111:3","reason":"Incorrect list-item indent: add 2 spaces","line":111,"column":3,"location":{"start":{"line":111,"column":3,"offset":4856},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"144:3","reason":"Incorrect list-item indent: add 2 spaces","line":144,"column":3,"location":{"start":{"line":144,"column":3,"offset":6603},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"145:3","reason":"Incorrect list-item indent: add 2 spaces","line":145,"column":3,"location":{"start":{"line":145,"column":3,"offset":6652},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"146:3","reason":"Incorrect list-item indent: add 2 spaces","line":146,"column":3,"location":{"start":{"line":146,"column":3,"offset":6727},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 2 spaces","name":"147:3","reason":"Incorrect list-item indent: add 2 spaces","line":147,"column":3,"location":{"start":{"line":147,"column":3,"offset":6777},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Don’t use literal URLs without angle brackets","name":"37:37-37:97","reason":"Don’t use literal URLs without angle brackets","line":37,"column":37,"location":{"start":{"line":37,"column":37,"offset":1710},"end":{"line":37,"column":97,"offset":1770},"indent":[]},"source":"remark-lint","ruleId":"no-literal-urls","fatal":false},{"message":"Use the trailing [] on reference links","name":"82:3-82:22","reason":"Use the trailing [] on reference links","line":82,"column":3,"location":{"start":{"line":82,"column":3,"offset":3800},"end":{"line":82,"column":22,"offset":3819},"indent":[]},"source":"remark-lint","ruleId":"no-shortcut-reference-link","fatal":false},{"message":"Found reference to undefined definition","name":"82:3-82:22","reason":"Found reference to undefined definition","line":82,"column":3,"location":{"start":{"line":82,"column":3,"offset":3800},"end":{"line":82,"column":22,"offset":3819},"indent":[]},"source":"remark-lint","ruleId":"no-undefined-references","fatal":false}],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<h2 id=\"preface\"><a href=\"#preface\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>preface</h2>\n<p>It’s now been over 15 years of me working with CSS, and I’d had a longstanding itch to write down my\ngrievances about how media queries were insufficient for web and responsive design, even in 2019. It\nwas going to be a thoughtpiece for the ages.</p>\n<p>I was going to start out with some great shared experience and get everyone going “yeah, mate! Been\nthere! This guy really gets it.” Next, I would carefully craft a scenario to show how media queries\nare a hacky solution, rallying sympathizers to my plight by selling it on a practical level. To sell\nit on the intellectual level I was going to throw in some design bullshit about how media queries\nare antithetical to design component thinking. And to tie it all up, I’d wax poetic about a future\nwhere this problem doesn’t exist, going beyond the shortcomings of <a href=\"https://github.com/joecritch/container-queries\">container queries</a> and even\nCSS Grid to dream of a solution.</p>\n<p>The title for such a blog post? I needed to really sell it. Something borderline-click-baity, while\nstaying true to my opinions. Something with candor. I titled it: <em>Media Queries are a Hack</em>.</p>\n<p>Then <a href=\"https://twitter.com/zachleat\">@zachleat</a> made this tweet:</p>\n<blockquote>\n<p>I’m trying to find the earliest mention of Element Queries or Container Queries (or this idea in\npractice, if not name).</p>\n<p>In the lead right now is @joecritch’s very early work in March 2013\n<a href=\"https://github.com/joecritch/container-queries\">https://github.com/joecritch/container-queries</a>\n(via @innovati).</p>\n<p>Does anyone have evidence of earlier work?</p>\n<p>@zachleat 12:50 PM · Dec 10, 2019 <a href=\"https://twitter.com/zachleat/status/1204488622386417665?s=20\">https://twitter.com/zachleat/status/1204488622386417665?s=20</a></p>\n</blockquote>\n<p>And in that tweet thread, it mentioned Ian Storm Taylor’s blog post titled—you guessed it—<a href=\"https://ianstormtaylor.com/media-queries-are-a-hack/\"><em>Media\nQueries are a Hack</em></a>.</p>\n<p>Written in <strong>2013.</strong></p>\n<p>I am not as original as I think I am. But all things considered, I’m glad I procrastinated on\nfinishing my blog post because now I can produce something of more value by stealing all these other\nsmart peoples’ ideas.</p>\n<h2 id=\"media-queries-are-still-a-hack\"><a href=\"#media-queries-are-still-a-hack\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>media queries are (still) a hack</h2>\n<p>Ian summarizes the major failing of media queries:</p>\n<blockquote>\n<p>I want <strong>write-once, use-anywhere</strong>—that’s what modular code is.</p>\n<p>Media queries are not that. They’re <strong>write-everywhere</strong>. They’re relative to your screen, so\nevery time you write a media query for max-width or min-width, you’re connecting the appearance of\nyour module to the width of the entire canvas—exactly what you were trying to avoid.</p>\n</blockquote>\n<p>This has only become more true and more of a problem in our React-influenced,\n<em>everything-is-modular</em> landscape of contemporary web design. And this lack of component-oriented\nthinking lead Ian to pine for what we all do—Container Queries.</p>\n<h2 id=\"container-queries\"><a href=\"#container-queries\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>container queries?</h2>\n<p>If, for example, I have a user card component that I want to rearrange when there’s not enough room,\nI can only do that based on the browser width, <strong>not the component width itself.</strong></p>\n<figure>\n  <img src=\"/assets/media-queries-are-still-a-hack/user-cards.svg\" alt=\"A horizontally-laid out user card next to a vertical one\" />\n  <figcaption>What if I wanted to stack a card vertically not based on screen width, but based on whether or not the text and image will fit side-by-side? In 2020, I still can’t.</figcaption>\n</figure>\n<p>Container Queries seem to check off all the boxes:</p>\n<ul>\n<li>✅ Modular and composable</li>\n<li>✅ Attack the root problem of responsive design: resizing based on <strong>content</strong></li>\n<li>✅ CSS-based</li>\n</ul>\n<p>But perfect as they may be, Container Queries are not happening anytime soon. In Zach Leatherman’s\nrecent article <a href=\"https://www.zachleat.com/web/origin-container-queries/\"><em>The Origin Story of Container Queries</em></a>, after much research, he even admits\nthe grim reality of our beloved Container Queries:</p>\n<blockquote>\n<p>[Container Queries] become almost cliché to mention it when talking about problems we’d like the\nweb platform to solve… Everyone wants it, but it sure seems like no one is actively working on it.</p>\n</blockquote>\n<p>So what’s a person to do?</p>\n<h2 id=\"css-grid-repeatauto-fit-minmax\"><a href=\"#css-grid-repeatauto-fit-minmax\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>css grid repeat(auto-fit, minmax())?</h2>\n<p>If you’ve used CSS Grid, you may be familiar with this wonderful snippet:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.grid</span> {\n  <span class=\"hljs-attribute\">display</span>: grid;\n  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">1rem</span>;\n  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(300px, 1fr));\n}</code></pre>\n<p>I was first introduced to this by <a href=\"https://labs.jensimmons.com/2017/03-009.html\">Jen Simmons</a>’ wonderful demo. With only 3 lines of CSS, we\nhave something that used to take hundreds:</p>\n<ul>\n<li>Responsive without any media queries</li>\n<li>Gutters built-in 😍</li>\n<li>And last, but most importantly, <strong>items that resize based on their width</strong> (kinda sounds like\nContainer Queries, don’t it?)</li>\n</ul>\n<p>But despite being incredibly-useful, CSS Grid’s <code>repeat(auto-fit, minmax())</code> has 2 major drawbacks:</p>\n<ul>\n<li>🚫 It can’t be used on the component level like a Container Query could, so components can’t\ndeclare their own widths and breakpoints; their parents must.</li>\n<li>🚫 It doesn’t allow for columns of different widths. Neither can you tell items to responsively\nspan multiple columns without media queries (and if we’re using media queries we‘re all the way\nback to where we started).</li>\n</ul>\n<h2 id=\"container-queries-1\"><a href=\"#container-queries-1\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>container queries.</h2>\n<p>It’s really hard to make a better pitch than Container Queries as a solution to the problem of\nmodular responsive design, after <strong>7 years</strong> and hundreds of great minds have all shared their\ncollective vision of how this holy-grail-of-a-CSS-selector should work. There are no downsides to\nContainer Queries, other than the belabored point that <em>they don’t exist</em>.</p>\n<p>So in parting, as I alluded to earlier, I will leave you, dear reader, with nary an original\nthought, instead, rehashing my favorite line from Phillip Walton’s well-referenced <a href=\"https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/\"><em>Responsive\nComponents: A Solution to the Container Queries Problem</em></a>:</p>\n<blockquote>\n<p>While I think we’d all agree a pure CSS solution is the ultimate goal, I hope we as a community\nare able prevent the perfect from becoming the enemy of the good.</p>\n<p>In matters like this, I like to remind myself of this quote from the <a href=\"https://www.w3.org/TR/html-design-principles/\">W3C’s HTML design\nprinciples</a>: “In case of conflict, consider users over authors over implementors over\nspecifiers over theoretical purity.”</p>\n</blockquote>\n<p>In other words, in 2020, the best solution we have to media queries’ failings is, somewhat\ndisappointingly, JavaScript. But not JavaScript for the sake of JavaScript; JavaScript for the sake\nof users.</p>\n<p>It’s been 7 years since Ian Storm Taylor published <em>Media Queries are a Hack</em>. To no one’s surprise,\nin 2020 they’re still a hack. And we’re still waiting on Container Queries.</p>\n<p>I may not have any original ideas on this subject, but at least we’re all on the same page.</p>\n<h2 id=\"more-reading\"><a href=\"#more-reading\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>more reading</h2>\n<ul>\n<li><a href=\"https://ianstormtaylor.com/media-queries-are-a-hack/\">Media Queries are a Hack</a> (the real one)</li>\n<li><a href=\"https://philipwalton.com/articles/responsive-components-a-solution-to-the-container-queries-problem/\">Responsive Components: A Solution to the Container Queries Problem</a></li>\n<li><a href=\"https://css-tricks.com/lets-not-forget-about-container-queries/\">Let’s Not Forget About Container Queries</a></li>\n<li><a href=\"https://www.zachleat.com/web/origin-container-queries/\">The Origin Story of Container Queries</a></li>\n</ul>\n"},{"data":{"title":"playfulness budget","date":"2019-11-06","description":"Finding that sweet spot of delight and whimsy in application design","slug":"playfulness-budget","tag":"design","updated":"2019-01-18"},"messages":[],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p><em>Homo Ludens</em> is a notable work of literature by Dutch philospher Henry Van Friedrick. In it he\nargues:</p>\n<blockquote>\n<p>Play is essential for the building of culture and intellect.</p>\n</blockquote>\n<p>“Play—” that sudden urge you have to jump in that puddle and ruin your shoes. That spark of humor\nwhen you imagine your toaster complaining at you for never cleaning all the crumbs out. When you see\nan empty street and decide to run just because “who says I shouldn’t be allowed to run in normal\nclothes without a reason?” The sense of play is something we crave on a regular basis—some more than\nothers—but can be seen as <em>verboten</em> in application design.</p>\n<p>There’s some reasonable cause for this feeling—application design does seek to be boring and\npredictable. For this reason I feel it’s hard for print and advertising designers to cross over into\nUI, and vice-versa. A magazine cover seeks to disrupt the space around it and draw your eye—either\nwith boldness in a sea of consistency, or starkness in a sea of boldness; the separation from the\npack is what drives the design. A user interface seeks to be predictable and usable without a\nmanual, allowing a user to accomplish a complicated task with friendly buttons and maybe an input or\ntwo.</p>\n<p>But where do we draw the line? When does “predictable” and “usable” cross over into sucking the life\nout of an interface?</p>\n<h2 id=\"4-ways-to-spend-playfulness-points\"><a href=\"#4-ways-to-spend-playfulness-points\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4 ways to spend playfulness points</h2>\n<p>I typically envision some imaginary bank or budget of playfulness that I draw from. I only have a\nfew “points” to spend to disrupt a user’s expectations in an application before they get frustrated.\nHow, and when? Here are 5 tips to spending your few points wisely.</p>\n<h3 id=\"1-spend-playfulness-points-during-slow-tasks\"><a href=\"#1-spend-playfulness-points-during-slow-tasks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>1. spend playfulness points during slow tasks</h3>\n<p>Every user, when using your application, will be in varying states of panic. Typically, the type of\napplication will lean one way or another.</p>\n<p>Booking a hotel, tickets for a show, or flight? These can feel <strong>rushed</strong>, sometimes intentionally,\nand even feature anxiety-inducing timers, <em>BOOK NOW!</em> calls to action, and the impending sense that\nsomeone will snag this before you do (<em>23 people have looked at this Airbnb in the last hour</em>).</p>\n<p>This is <strong>not a good time to test the user’s patience with playfulness.</strong> But in times when they’re\nnot rushed or panicked, make their day a little better!</p>\n<figure>\n  <img src=\"/assets/playfulness-budget/pizza-tracker.jpg\" alt=\"Domino’s Pizza Tracker\" />\n  <figcaption>The Domino’s Pizza Tracker: probably my favorite example of a playful time-passer</figcaption>\n</figure>\n<p>What better way to kill a 30-minute wait for a pizza to arrive than stare at a pizza tracker? Or say\na user is shopping for beds—the opposite of stressful—and you came up with a cheeky “bounce\nsimulator” that compares mattresses’ bounciness with a fun, interactive animation. These are all\nwonderful opportunities to turn a slow experience where a user has time to spare into a memorable\ninteraction.</p>\n<h3 id=\"2-spend-playfulness-points-during-frustrating-tasks\"><a href=\"#2-spend-playfulness-points-during-frustrating-tasks\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>2. spend playfulness points during frustrating tasks</h3>\n<figure>\n  <video autoplay=\"true\" controls muted loop playsinline width=\"1376\" height=\"600\">\n    <source src=\"/assets/playfulness-budget/little-known-goods-carousel.mp4\" type=\"video/mp4\" />\n  </video>\n  <figcaption>Little Known Goods Carousel animation</figcaption>\n</figure>\n<p>For a recent <a href=\"https://littleknowngoods.com\">ecommerce site I built</a>, I wanted to address 2 pain points that are the bane of\nmy online shopping experience: image carousels and zoom views.</p>\n<p>For some reason, I just find most sites that have these to be buggy, unexpected, and frustrating.\nHoping I wasn’t alone, I decided to introduce a little unpredictability for a little bit of whimsy.</p>\n<p>Using the metaphor of a map, I created a carousel that folds and unfolds as you click through it,\nanimating smoothly between the stops. For the zoom view, on desktop I made the hover interaction\nreveal the zoomed-in view without clicking. Quick to navigate, quick to dismiss. And on smaller\ndevices when you find yourself pinch—zooming anyway, I simply made the image itself high-res, and\ndisabled the zoom so users can use the natural zoom on their device (I personally find the simulated\nzoom, like Twitter’s mobile site, to be buggy, and I always have images flying off into space or\nre-centering wildly, which I don’t understand because zooming in on static images works just great).</p>\n<p>Perhaps I got a little too anecdotal here, but the main point is: if there’s an interaction that is\ntypically laden with frustration (date-picking availability, calendars, actually just dates and\ntimes in general are hard…), it may be a good opportunity to turn a bad expectation into an\nunexpected joy by making it playful.</p>\n<h3 id=\"3-spend-playfulness-points-on-first-impressions\"><a href=\"#3-spend-playfulness-points-on-first-impressions\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>3. spend playfulness points on first impressions</h3>\n<figure>\n  <video autoplay=\"true\" controls muted loop playsinline width=\"1375\" height=\"600\">\n    <source src=\"/assets/playfulness-budget/playdate.mp4\" type=\"video/mp4\" />\n  </video>\n  <figcaption>A 3D, rotatable portable game console right at the top of the page? Yes, please.</figcaption>\n</figure>\n<p>A user’s first several seconds on a site is a critical time for them. They’re orienting to the\nsite—to the layout, colors, language, etc.—while also having something they want to accomplish.\nWhile often times this is a winding path for the user to clarify what they want while orienting\nthemselves to a new interface, that first few seconds that a user suspends judgment can be just the\nright moment for playfulness.</p>\n<p>Greeting a user, for instance, with a fun animation on page load doesn’t disrupt their task while\nthey figure out where it is they need to go.</p>\n<p>Granted, there are good and bad types of animation. A good animation would simply be adding motion\nto the hero graphic, where a bad animation would be hiding the top menu and animating in items\none-by-one so the user has to wait painfully to even start their task. But assuming you executed the\nformer, setting an impression for playfulness right off the bat can pay dividends later.</p>\n<h3 id=\"4-spend-playfulness-points-during-successes\"><a href=\"#4-spend-playfulness-points-during-successes\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>4. spend playfulness points during successes</h3>\n<p>Errors are frustrating. Messages like <code>Oops! Something went wrong!</code> can be flippant and tone-deaf,\nespecially when it resulted in data loss. Believe it or not, that was an actual error message I\nencountered that left me unable to pay a bill! <em>Oops!?</em> More like “Oops! I accidentally cancelled\nyour horrible service!”</p>\n<p>In light of so many failures we encounter on the web, successes are something that should be\ncelebrated! 🎉 Did a user finish sending an email? Add a fun illustration and some congratulatory\ncopy on that succes page! Has a user reached a certain milestone in your app (miles walked,\nachievement reached, numbers hit)? Add a cool badge to their profile.</p>\n<p>Studies have shown that unexpected rewards result in the most positively-perceived experiences. So\nlet’s try and help the humans that use our application feel appreciated because they’re worth it.</p>\n<h2 id=\"how-will-you-spend-yours\"><a href=\"#how-will-you-spend-yours\" aria-hidden=\"true\"><span class=\"icon icon-link\"></span></a>how will you spend yours?</h2>\n<p>An application’s primary purpose is to help a user accomplish a task, and help them accomplish it as\nquickly and effortlessly as possible. But that can be a little too robotic.</p>\n<p>As we’re reminded by <em>Homo Ludens</em>, when we’re dealing with people, sometimes <em>too much</em> efficiency\ncan be boring and detrimental to the squishy humans you’re guiding. Sometimes the straightest roads\ncan have us feeling sleepy behind the wheel a bit. Sometimes the little detours, the fun little dips\nand curves, <em>make</em> the journey memorable.</p>\n"}]