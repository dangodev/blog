[{"data":{"title":"screen width media queries are a hack","date":"2019-11-06","description":"Media queries are obsolete, and other thoughts after using them for a decade.","slug":"screen-width-media-queries-are-a-hack","image":"/assets/screen-width-media-queries-are-a-hack/videophone.jpg","tag":"dev","updated":"2019-11-06"},"messages":[{"message":"Incorrect list-item indent: add 1 space","name":"50:4","reason":"Incorrect list-item indent: add 1 space","line":50,"column":4,"location":{"start":{"line":50,"column":4,"offset":1533},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 1 space","name":"51:4","reason":"Incorrect list-item indent: add 1 space","line":51,"column":4,"location":{"start":{"line":51,"column":4,"offset":1591},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Incorrect list-item indent: add 1 space","name":"52:4","reason":"Incorrect list-item indent: add 1 space","line":52,"column":4,"location":{"start":{"line":52,"column":4,"offset":1651},"end":{"line":null,"column":null}},"source":"remark-lint","ruleId":"list-item-indent","fatal":false},{"message":"Found reference to undefined definition","name":"94:9-94:34","reason":"Found reference to undefined definition","line":94,"column":9,"location":{"start":{"line":94,"column":9,"offset":4313},"end":{"line":94,"column":34,"offset":4338},"indent":[]},"source":"remark-lint","ruleId":"no-undefined-references","fatal":false},{"message":"Found unused definition","name":"105:1-105:57","reason":"Found unused definition","line":105,"column":1,"location":{"start":{"line":105,"column":1,"offset":4775},"end":{"line":105,"column":57,"offset":4831},"indent":[]},"source":"remark-lint","ruleId":"no-unused-definitions","fatal":false},{"message":"Found unused definition","name":"110:1-110:101","reason":"Found unused definition","line":110,"column":1,"location":{"start":{"line":110,"column":1,"offset":5096},"end":{"line":110,"column":101,"offset":5196},"indent":[]},"source":"remark-lint","ruleId":"no-unused-definitions","fatal":false}],"history":[],"cwd":"/Users/drew/Sites/dangodev/blog","contents":"<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Media_Queries/Using_media_queries\">Media queries</a> are an indispensible part of CSS, with <code>min-width</code> (or <code>max-width</code>, depending on\nyour preference) being the most-used. Ever since <a href=\"https://www.smashingmagazine.com/2011/01/guidelines-for-responsive-web-design/\">responsive design</a> first came into view, weâ€™ve\nbeen able to pull off slick things like increasing the number of columns as the screen width\nexpands:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-comment\">/* Mobile firstâ„¢! */</span>\n<span class=\"hljs-selector-tag\">float</span>: <span class=\"hljs-selector-tag\">none</span>;\n\n<span class=\"hljs-comment\">/* small tablet sizes */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">600px</span>) {\n  <span class=\"hljs-selector-tag\">float</span>: <span class=\"hljs-selector-tag\">left</span>;\n  <span class=\"hljs-selector-tag\">width</span>: 50%;\n}\n\n<span class=\"hljs-comment\">/* medium tablet / small laptop sizes */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">900px</span>) {\n  <span class=\"hljs-selector-tag\">width</span>: 33<span class=\"hljs-selector-class\">.33333333</span>%;\n}\n\n<span class=\"hljs-comment\">/* desktop size */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">1200px</span>) {\n  <span class=\"hljs-selector-tag\">width</span>: 25%;\n}\n\n<span class=\"hljs-comment\">/* large screen size */</span>\n@<span class=\"hljs-keyword\">media</span> (min-width: <span class=\"hljs-number\">1800px</span>) {\n  <span class=\"hljs-selector-tag\">width</span>: 20%;\n}</code></pre>\n<p>But with this new thinking of responsive design and fluidity, our designs became more complicated.\nWe had started to realize what the web was capable of and the unique challenges it brought. Instead\nof one layout to design as was the case in print, now we had nearly-infinite (or so it would seem).\nTo handle this complexity we turned to <strong>componentization</strong>.</p>\n<p>Component thinking for the web started with CSS paradigms like Nicole Sullivanâ€™s <a href=\"http://oocss.org/\">OOCSS</a> and\n<a href=\"http://getbem.com/\">BEM</a> in the early 2010s, to name a few. In a nutshell, component thinking involves building:</p>\n<ol>\n<li>Modular, reusable bits of UI (think <code>.nav</code> and <code>.btn</code>)</li>\n<li>Components that keep track of their own state and styles</li>\n<li>Components that maintain reusability by displaying the same, regardless of context</li>\n</ol>\n<p>Letâ€™s take a look back at screen width media queries againâ€”see how that breaks component thinking?\nIf I have, say, a blog post component (like the one youâ€™re looking at now!) that is responsible for\nword wrap, but I also have it next to a sidebar that can open and close, how should that be managed?</p>\n<video controls loop muted autoplay title=\"recording of a sidebar expanding and contracting, destroying text flow beside it\">\n  <source src=\"/assets/screen-width-media-queries-are-a-hack/expanding-sidebar.mp4\" type=\"video/mp4\">\n</video>\n<p>We should be stacking those images a little better, and now screen width media queries canâ€™t help us\nhere. <strong>The screen width isnâ€™t changing!</strong> Instead, weâ€™d have to now create some parent component\nthat controls the layout. But in order to do that, we have to <strong>strip responsibility of layout away\nfrom our blog post component</strong>â€”the very thing it was created to do.</p>\n<h2>A Glimmer of Hope</h2>\n<p><a href=\"https://alistapart.com/article/container-queries-once-more-unto-the-breach/\">Container queries</a> have been requested since 2015 to solve this problem, so this\nisnâ€™t new. But itâ€™s now 2019, and, well, itâ€™s time we found another way to solve this. What should\nwe do?</p>\n<p>Currently, <strong>CSS Grid</strong> is the closest, most versatile thing we have to a media query that respects\nthe actual width of a component. Consider this beautiful CSS snippet from <a href=\"https://labs.jensimmons.com/2017/03-009.html\">Jen Simmons</a>:</p>\n<pre><code class=\"hljs language-css\"><span class=\"hljs-selector-class\">.grid</span> {\n  <span class=\"hljs-attribute\">display</span>: grid;\n  <span class=\"hljs-attribute\">grid-gap</span>: <span class=\"hljs-number\">1rem</span>;\n  <span class=\"hljs-attribute\">grid-template-columns</span>: <span class=\"hljs-built_in\">repeat</span>(auto-fit, minmax(300px, 1fr));\n}</code></pre>\n<p>Here we have a pretty sophsticated bit of logic in only 3 lines of CSS. Letâ€™s focus on the last\nproperty, <code>grid-template-columns</code>. With that, weâ€™re able to:</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">Code</th>\n<th align=\"left\">Result</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code>repeat</code></td>\n<td align=\"left\">Automatically figure out columns based on this logic</td>\n</tr>\n<tr>\n<td align=\"left\"><code>auto-fit</code></td>\n<td align=\"left\">If the items donâ€™t fill up the first row, stretch them out till they do</td>\n</tr>\n<tr>\n<td align=\"left\"><code>minmax(300px, 1fr)</code></td>\n<td align=\"left\"><code>1fr</code> sizes every component proportionally to each other. <code>300px</code> tells grid that once they get smaller than that to push them to the next row ðŸŽ‰</td>\n</tr>\n</tbody>\n</table>\n<p>If you arenâ€™t quite following, youâ€™re not alone. Grid is hard. If youâ€™re a little lost, please\nconsult [Chen Hui Jing][chen-hui]â€™s video on <code>auto-fit</code> and <code>auto-fill</code>.</p>\n<h2>A Dash of Despair</h2>\n<p>Though CSS Grid is a step in the right direction, it still has flaws. The biggest one is that <strong>this\nmethod canâ€™t support columns of different widths</strong> (Rachel Andrew bemoans the same thing in her\nrecent post, <em><a href=\"https://www.smashingmagazine.com/2019/11/css-things-cant-yet-do/\">Things We Canâ€™t (Yet) Do In CSS</a></em>).</p>\n<p>Though if this one problem were solved, CSS Grid may very well be a new, better, media query.</p>\n"}]